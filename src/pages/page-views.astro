---
export const prerender = false;
import { and, count, countDistinct, desc, gte, like, lte } from "drizzle-orm";
import ViewChart from "~/components/ViewChart";
import Layout from "~/layouts/Layout.astro";
import { PageViewsTable, client } from "~/lib/dbClient";
const searchParams = Astro.url.searchParams;
const dateRange = searchParams.get("date-range") ?? "all-time";
const page = Astro.url.searchParams.get("page")
  ? Number(Astro.url.searchParams.get("page"))
  : 1;
let dateGreaterThan: Date | undefined;
const dateLessThan = new Date(Date.now());
switch (dateRange) {
  case "past-day":
    dateGreaterThan = new Date(Date.now() - 24 * 60 * 60 * 1000);
    break;
  case "past-week":
    dateGreaterThan = new Date(Date.now() - 7 * 24 * 60 * 60 * 1000);
    break;
  case "past-month":
    dateGreaterThan = new Date(Date.now() - 30 * 24 * 60 * 60 * 1000);
    break;
  case "past-year":
    dateGreaterThan = new Date(Date.now() - 365 * 24 * 60 * 60 * 1000);
    break;
  default:
    break;
}

const pageSize = 10;
const offset = (page - 1) * pageSize;
const search = searchParams.get("search") ?? "";

const start = performance.now();

const conditions = [];
if (dateGreaterThan) {
  conditions.push(gte(PageViewsTable.date, dateGreaterThan));
  conditions.push(lte(PageViewsTable.date, dateLessThan));
}
if (search !== "") {
  conditions.push(like(PageViewsTable.url, `%${search}%`));
}
const totalViewsQuery = client
  .select({
    totalUniqueURLs: countDistinct(PageViewsTable.url),
    totalCount: count(),
  })
  .from(PageViewsTable)
  .where(and(...conditions));

const viewsQuery = client
  .select({
    url: PageViewsTable.url,
    pageviews: count(),
  })
  .from(PageViewsTable)
  .where(and(...conditions))
  .limit(pageSize)
  .offset(offset)
  .groupBy(PageViewsTable.url)
  .orderBy(desc(count()));
const [totalViewsRes, views] = await Promise.all([totalViewsQuery, viewsQuery]);

const end = performance.now();
console.log(`Query took ${end - start}ms`);
const totalViews = totalViewsRes[0]?.totalCount ?? 0;
const totalUniqueURLs = totalViewsRes[0]?.totalUniqueURLs ?? 0;
const totalPages = Math.ceil(totalUniqueURLs / pageSize);
const paginationButtonClasses = "border p-2 rounded-md my-2 border-black";
const paginationButtonClassesDisabled =
  "border p-2 my-2 rounded-md cursor-not-allowed text-gray-300 border-gray-300";
---

<Layout title="Page views" description="Page views">
  <h1>Page views (migrated from GA on 21 Dec. 2023)</h1>
  <h2>Total</h2>
  <p>Total views on all pages: {totalViews}</p>
  <form id="date-range-form" method="POST">
    <input
      type="search"
      id="search"
      name="search"
      class="p-1 border border-black"
      placeholder="Search for a URL"
      value={search}
    />
    <button type="submit">Submit</button>
    <br />
    <select
      class="border-black border p-1 my-2"
      name="date-range"
      id="date-range"
    >
      <option selected={dateRange === "all-time"} value="all-time"
        >All time</option
      >
      <option selected={dateRange === "past-day"} value="past-day"
        >Past day</option
      >
      <option selected={dateRange === "past-week"} value="past-week"
        >Past week</option
      >
      <option selected={dateRange === "past-month"} value="past-month"
        >Past month</option
      >
      <option selected={dateRange === "past-year"} value="past-year"
        >Past year</option
      >
    </select>
  </form>
  <ViewChart data={views} client:load />
  {
    totalPages > 1 ? (
      <div class="flex gap-x-4 items-center">
        {offset === 0 ? (
          <>
            <span class={paginationButtonClassesDisabled}>First</span>
            <span class={paginationButtonClassesDisabled}>Previous</span>
          </>
        ) : (
          <>
            <a
              class={paginationButtonClasses}
              href={`?page=1&date-range=${dateRange}`}
            >
              First
            </a>
            <a
              class={paginationButtonClasses}
              href={`?page=${page - 1}&date-range=${dateRange}`}
            >
              Previous
            </a>
          </>
        )}
        <span>{page}</span>
        {page === totalPages ? (
          <>
            <span class={paginationButtonClassesDisabled}>Next</span>
            <span class={paginationButtonClassesDisabled}>Last</span>
          </>
        ) : (
          <>
            <a
              class={paginationButtonClasses}
              href={`?page=${page + 1}&date-range=${dateRange}`}
            >
              Next
            </a>
            <a
              class={paginationButtonClasses}
              href={`?page=${totalPages}&date-range=${dateRange}`}
            >
              Last
            </a>
          </>
        )}
      </div>
    ) : null
  }
  <script>
    document.addEventListener("astro:page-load", () => {
      const form = document.getElementById("date-range-form");
      const dateRange = document.getElementById("date-range");
      dateRange?.addEventListener("change", () => {
        const formData = new FormData(form as HTMLFormElement);
        document.location.href = `?date-range=${
          (dateRange as HTMLSelectElement).value
        }&page=1&search=${formData.get("search")}`;
      });
      form?.addEventListener("submit", (e) => {
        e.preventDefault();
        const formData = new FormData(form as HTMLFormElement);
        document.location.href = `?date-range=${
          (dateRange as HTMLSelectElement).value
        }&page=1&search=${formData.get("search")}`;
      });
    });
  </script>
</Layout>
