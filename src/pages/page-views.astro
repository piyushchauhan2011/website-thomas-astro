---
export const prerender = false;
import {
  and,
  count,
  countDistinct,
  desc,
  gte,
  like,
  lte,
  sql,
} from "drizzle-orm";
import UrlChart from "~/components/UrlChart";
import ViewChart from "~/components/ViewChart";
import Layout from "~/layouts/Layout.astro";
import { PageViewsTable, client } from "~/lib/dbClient";
const searchParams = Astro.url.searchParams;
const dateRange = searchParams.get("date-range") ?? "all-time";
const page = searchParams.get("page") ? Number(searchParams.get("page")) : 1;
let dateGreaterThan: Date | undefined;
const dateLessThan = new Date(Date.now());
switch (dateRange) {
  case "past-day":
    dateGreaterThan = new Date(Date.now() - 24 * 60 * 60 * 1000);
    break;
  case "past-week":
    dateGreaterThan = new Date(Date.now() - 7 * 24 * 60 * 60 * 1000);
    break;
  case "past-month":
    dateGreaterThan = new Date(Date.now() - 30 * 24 * 60 * 60 * 1000);
    break;
  case "past-year":
    dateGreaterThan = new Date(Date.now() - 365 * 24 * 60 * 60 * 1000);
    break;
  default:
    dateGreaterThan = new Date("2024-01-04");
    break;
}

const pageSize = 10;
const offset = (page - 1) * pageSize;
const search = searchParams.get("search") ?? "";

const start = performance.now();

const conditions = [];
if (dateGreaterThan) {
  conditions.push(gte(PageViewsTable.date, dateGreaterThan));
  conditions.push(lte(PageViewsTable.date, dateLessThan));
}
if (search !== "") {
  conditions.push(like(PageViewsTable.url, `%${search}%`));
}
let totalViews;
let pageViews;
let viewsPerUrl;
let totalUniqueURLs;
let totalPages;
if (!searchParams.get("mode") || searchParams.get("mode") === "page-views") {
  const whereClause = dateGreaterThan
    ? `WHERE date >= '${dateGreaterThan.toISOString()}'`
    : "";
  const pageViewsQuery = client.execute(
    sql.raw(`SELECT
    date_trunc('day', date) AS day,
    COUNT(*) AS page_views_count
  FROM
    page_views
  ${whereClause}
  GROUP BY
    day
  ORDER BY
    day ASC;`),
  );
  let totalViewsRes;
  let pageViewsRes;
  const totalViewsQuery = client
    .select({
      totalUniqueURLs: countDistinct(PageViewsTable.url),
      totalCount: count(),
    })
    .from(PageViewsTable)
    .where(and(...conditions));
  [pageViewsRes, totalViewsRes] = await Promise.all([
    pageViewsQuery,
    totalViewsQuery,
  ]);
  pageViews = pageViewsRes.rows as { day: string; page_views_count: string }[];
  totalViews = totalViewsRes[0]?.totalCount ?? 0;
} else {
  let totalViewsRes;
  const totalViewsQuery = client
    .select({
      totalUniqueURLs: countDistinct(PageViewsTable.url),
      totalCount: count(),
    })
    .from(PageViewsTable)
    .where(and(...conditions));
  const viewsQuery = client
    .select({
      url: PageViewsTable.url,
      pageviews: count(),
    })
    .from(PageViewsTable)
    .where(and(...conditions))
    .limit(pageSize)
    .offset(offset)
    .groupBy(PageViewsTable.url)
    .orderBy(desc(count()));
  [totalViewsRes, viewsPerUrl] = await Promise.all([
    totalViewsQuery,
    viewsQuery,
  ]);
  totalViews = totalViewsRes[0]?.totalCount ?? 0;
  totalUniqueURLs = totalViewsRes[0]?.totalUniqueURLs ?? 0;
  totalPages = Math.ceil(totalUniqueURLs / pageSize);
}

const end = performance.now();
console.log(`Query took ${end - start}ms`);
const paginationButtonClasses = "border p-2 rounded-md my-2 border-black";
const paginationButtonClassesDisabled =
  "border p-2 my-2 rounded-md cursor-not-allowed text-gray-300 border-gray-300";
const previousPageUrl = new URLSearchParams(searchParams);
previousPageUrl.set("page", `${page - 1}`);
const firstPageUrl = new URLSearchParams(searchParams);
firstPageUrl.set("page", "1");
const lastPageUrl = new URLSearchParams(searchParams);
lastPageUrl.set("page", `${totalPages}`);
const nextPageUrl = new URLSearchParams(searchParams);
nextPageUrl.set("page", `${page + 1}`);
---

<Layout title="Page views" description="Page views">
  <h1 class="text-2xl mb-4">Page views (migrated from GA on 4 Jan. 2024)</h1>
  <p class="mb-2">Total views on all pages: <b>{totalViews}</b></p>
  <div class="flex mb-4">
    <a
      class={`text-sm py-2 px-4 rounded-l-md font-semibold ${
        !searchParams.get("mode") || searchParams.get("mode") === "page-views"
          ? "bg-secondary text-white"
          : "border-secondary border-2 text-secondary"
      }`}
      href="?mode=page-views">Page views</a
    ><a
      class={`py-2 px-4 rounded-r-md font-semibold text-sm ${
        searchParams.get("mode") === "per-url"
          ? "bg-secondary text-white"
          : "border-secondary border-2 text-secondary"
      }`}
      href="?mode=per-url">Per URL</a
    >
  </div>
  <form id="date-range-form" method="POST">
    {
      searchParams.get("mode") === "per-url" ? (
        <>
          <input
            type="search"
            id="search"
            name="search"
            class="p-1 border border-black"
            placeholder="Search for a URL"
            value={search}
          />
          <button type="submit">Submit</button>
          <br />
        </>
      ) : null
    }
    <span>Period:</span>{" "}<select
      class="border-black border p-1 my-2"
      name="date-range"
      id="date-range"
    >
      <option selected={dateRange === "all-time"} value="all-time"
        >All time</option
      >
      <option selected={dateRange === "past-day"} value="past-day"
        >Past day</option
      >
      <option selected={dateRange === "past-week"} value="past-week"
        >Past week</option
      >
      <option selected={dateRange === "past-month"} value="past-month"
        >Past month</option
      >
      <option selected={dateRange === "past-year"} value="past-year"
        >Past year</option
      >
    </select>
  </form>
  {
    viewsPerUrl ? (
      <UrlChart data={viewsPerUrl} client:load />
    ) : pageViews ? (
      <ViewChart data={pageViews} client:load />
    ) : null
  }
  {
    totalPages && totalPages > 1 ? (
      <div class="flex gap-x-4 items-center">
        {offset === 0 ? (
          <>
            <span class={paginationButtonClassesDisabled}>First</span>
            <span class={paginationButtonClassesDisabled}>Previous</span>
          </>
        ) : (
          <>
            <a
              class={paginationButtonClasses}
              href={`?${firstPageUrl.toString()}`}
            >
              First
            </a>
            <a
              class={paginationButtonClasses}
              href={`?${previousPageUrl.toString()}`}
            >
              Previous
            </a>
          </>
        )}
        <span>{page}</span>
        {page === totalPages ? (
          <>
            <span class={paginationButtonClassesDisabled}>Next</span>
            <span class={paginationButtonClassesDisabled}>Last</span>
          </>
        ) : (
          <>
            <a
              class={paginationButtonClasses}
              href={`?${nextPageUrl.toString()}`}
            >
              Next
            </a>
            <a
              class={paginationButtonClasses}
              href={`?${lastPageUrl.toString()}`}
            >
              Last
            </a>
          </>
        )}
      </div>
    ) : null
  }
  <script>
    document.addEventListener("astro:page-load", () => {
      const form = document.getElementById("date-range-form");
      const dateRange = document.getElementById("date-range");
      const searchInput = document.getElementById("search");
      dateRange?.addEventListener("change", () => {
        const urlParams = new URLSearchParams(window.location.search);
        urlParams.set("date-range", (dateRange as HTMLSelectElement).value);
        urlParams.set("page", "1");
        document.location.href = `?${urlParams.toString()}`;
      });
      form?.addEventListener("submit", (e) => {
        e.preventDefault();
        const urlParams = new URLSearchParams(window.location.search);
        const formData = new FormData(form as HTMLFormElement);
        urlParams.set("page", "1");
        urlParams.set("search", formData.get("search") as string);
        document.location.href = `?${urlParams.toString()}`;
      });
      // handle clear button on search input
      searchInput?.addEventListener("search", (e) => {
        if ((e.target as HTMLInputElement)?.value === "") {
          const urlParams = new URLSearchParams(window.location.search);
          urlParams.set("page", "1");
          urlParams.set("search", (e.target as HTMLInputElement).value);
          document.location.href = `?${urlParams.toString()}`;
        }
      });
    });
  </script>
</Layout>
